import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as sgMail from '@sendgrid/mail';
import { AlertDocument } from '../../schemas/alert.schema';

@Injectable()
export class EmailService {
  private readonly logger = new Logger(EmailService.name);

  constructor(private configService: ConfigService) {
    const apiKey = this.configService.get<string>('SENDGRID_API_KEY');
    if (apiKey) {
      sgMail.setApiKey(apiKey);
    } else {
      this.logger.warn('SendGrid API key not configured');
    }
  }

  async sendAlert(alert: AlertDocument): Promise<boolean> {
    try {
      const apiKey = this.configService.get<string>('SENDGRID_API_KEY');
      if (!apiKey) {
        this.logger.warn('SendGrid API key not configured, skipping email alert');
        return false;
      }

      const fromEmail = this.configService.get<string>('SENDGRID_FROM_EMAIL') || 'alerts@bharatmonitor.com';
      
      const msg = {
        to: alert.recipient,
        from: fromEmail,
        subject: this.getEmailSubject(alert),
        text: alert.message,
        html: this.getEmailHtml(alert),
      };

      await sgMail.send(msg);
      this.logger.log(`Email alert sent to ${alert.recipient}`);
      return true;

    } catch (error) {
      this.logger.error(`Failed to send email alert to ${alert.recipient}:`, error);
      return false;
    }
  }

  private getEmailSubject(alert: AlertDocument): string {
    const monitor = alert.metadata?.monitorName || 'Monitor';
    
    switch (alert.type) {
      case 'down':
        return `üî¥ ${monitor} is DOWN - Bharat Monitor Alert`;
      case 'up':
        return `üü¢ ${monitor} is back UP - Bharat Monitor Alert`;
      case 'slow':
        return `üü° ${monitor} is responding slowly - Bharat Monitor Alert`;
      case 'validation_failed':
        return `‚ö†Ô∏è ${monitor} validation failed - Bharat Monitor Alert`;
      default:
        return `Bharat Monitor Alert - ${monitor}`;
    }
  }

  private getEmailHtml(alert: AlertDocument): string {
    const timestamp = new Date().toLocaleString();
    
    return `
      <!DOCTYPE html>
      <html>
      <head>
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: #1976d2; color: white; padding: 20px; text-align: center; }
          .content { padding: 20px; background: #f9f9f9; }
          .alert-box { 
            padding: 15px; 
            margin: 15px 0; 
            border-left: 4px solid #1976d2; 
            background: white; 
          }
          .alert-down { border-left-color: #f44336; }
          .alert-up { border-left-color: #4caf50; }
          .alert-slow { border-left-color: #ff9800; }
          .footer { text-align: center; padding: 20px; color: #666; font-size: 12px; }
          .metadata { background: #f5f5f5; padding: 10px; margin: 10px 0; border-radius: 4px; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>üîç Bharat Monitor Alert</h1>
          </div>
          <div class="content">
            <div class="alert-box alert-${alert.type}">
              <h2>Alert Details</h2>
              <p><strong>Message:</strong></p>
              <p>${alert.message.replace(/\n/g, '<br>')}</p>
              
              <div class="metadata">
                <p><strong>Alert Type:</strong> ${alert.type.toUpperCase()}</p>
                <p><strong>Time:</strong> ${timestamp}</p>
                ${alert.metadata?.responseTime ? `<p><strong>Response Time:</strong> ${alert.metadata.responseTime}ms</p>` : ''}
                ${alert.metadata?.statusCode ? `<p><strong>Status Code:</strong> ${alert.metadata.statusCode}</p>` : ''}
              </div>
            </div>
            
            <p>This alert was generated by Bharat Monitor. Please check your monitoring dashboard for more details.</p>
          </div>
          <div class="footer">
            <p>Bharat Monitor - Website & API Monitoring Service</p>
            <p>If you no longer wish to receive these alerts, please update your preferences in the dashboard.</p>
          </div>
        </div>
      </body>
      </html>
    `;
  }
}
